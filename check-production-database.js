const { MongoClient } = require('mongodb');

async function checkProductionDatabase() {
  console.log('๐ ูุญุต ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุนูู ุณูุฑูุฑ ุงูุฏูููู');
  console.log('================================================');
  
  // ุงุณุชุฎุฏุงู ููุณ ุฅุนุฏุงุฏุงุช ุงูุณูุฑูุฑ
  const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017';
  const mongoDbName = process.env.MONGODB_DB_NAME || 'student_portal';
  
  console.log(`๐ก MongoDB URI: ${mongoUri}`);
  console.log(`๐ Database Name: ${mongoDbName}`);
  
  const client = new MongoClient(mongoUri);
  
  try {
    await client.connect();
    console.log('โ ูุชุตู ุจู MongoDB ุนูู ุงูุณูุฑูุฑ');
    
    const db = client.db(mongoDbName);
    
    // ูุญุต ุฌููุน ุงููููููุดูุณ ุงูููุฌูุฏุฉ
    const collections = await db.listCollections().toArray();
    console.log(`\n๐ ุฅุฌูุงูู ุงููููููุดูุณ: ${collections.length}`);
    console.log('\n๐ ูุงุฆูุฉ ุงููููููุดูุณ:');
    
    for (const collection of collections) {
      const collectionName = collection.name;
      const count = await db.collection(collectionName).countDocuments();
      console.log(`  ๐ ${collectionName}: ${count} ูุซููุฉ`);
    }
    
    // ูุญุต ุชูุตููู ูููููููุดูุณ ุงููููุฉ
    console.log('\n๐ ูุญุต ุชูุตููู ูููููููุดูุณ:');
    
    // ูุญุต users collection
    if (collections.find(c => c.name === 'users')) {
      console.log('\n๐ฅ Users Collection:');
      const users = await db.collection('users').find({}).limit(5).toArray();
      users.forEach(user => {
        console.log(`  ๐ง ${user.email} | ๐ค ${user.role || 'no role'} | ๐ ${user.fullName || 'no name'}`);
      });
      
      // ูุญุต ุงูุฃุฏูุงุฑ
      const roles = await db.collection('users').distinct('role');
      console.log(`  ๐ญ ุงูุฃุฏูุงุฑ ุงูููุฌูุฏุฉ: [${roles.join(', ')}]`);
    }
    
    // ูุญุต students collection
    if (collections.find(c => c.name === 'students')) {
      console.log('\n๐ Students Collection:');
      const students = await db.collection('students').find({}).limit(3).toArray();
      students.forEach(student => {
        console.log(`  ๐ง ${student.email} | ๐ ${student.studentId || 'no ID'} | ๐ซ ${student.college || 'no college'}`);
      });
    }
    
    // ูุญุต shifts collection  
    if (collections.find(c => c.name === 'shifts')) {
      console.log('\n๐ Shifts Collection:');
      const shiftsCount = await db.collection('shifts').countDocuments();
      const activeShifts = await db.collection('shifts').countDocuments({ status: 'active' });
      const closedShifts = await db.collection('shifts').countDocuments({ status: 'closed' });
      console.log(`  ๐ ุฅุฌูุงูู ุงููุฑุฏูุงุช: ${shiftsCount}`);
      console.log(`  ๐ข ุงููุฑุฏูุงุช ุงููุดุทุฉ: ${activeShifts}`);
      console.log(`  ๐ด ุงููุฑุฏูุงุช ุงููุบููุฉ: ${closedShifts}`);
    }
    
    // ูุญุต attendance collection
    if (collections.find(c => c.name === 'attendance')) {
      console.log('\nโ Attendance Collection:');
      const attendanceCount = await db.collection('attendance').countDocuments();
      console.log(`  ๐ ุฅุฌูุงูู ุณุฌูุงุช ุงูุญุถูุฑ: ${attendanceCount}`);
      
      // ุขุฎุฑ 3 ุณุฌูุงุช ุญุถูุฑ
      const recentAttendance = await db.collection('attendance')
        .find({})
        .sort({ scanTime: -1 })
        .limit(3)
        .toArray();
      
      recentAttendance.forEach(record => {
        console.log(`  โฐ ${record.scanTime} | ๐ง ${record.studentEmail} | ๐จโ๐ผ ${record.supervisorName}`);
      });
    }
    
    // ูุญุต subscriptions collection
    if (collections.find(c => c.name === 'subscriptions')) {
      console.log('\n๐ณ Subscriptions Collection:');
      const subscriptionsCount = await db.collection('subscriptions').countDocuments();
      console.log(`  ๐ ุฅุฌูุงูู ุงูุงุดุชุฑุงูุงุช: ${subscriptionsCount}`);
    }
    
    console.log('\n๐ฏ ููุฎุต ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    console.log('===============================');
    console.log(`๐ Database: ${mongoDbName}`);
    console.log(`๐ Collections: ${collections.length}`);
    console.log(`๐ฅ Users: ${await db.collection('users').countDocuments()} ุญุณุงุจ`);
    console.log(`๐ Students: ${await db.collection('students').countDocuments()} ุทุงูุจ`);
    console.log(`๐ Shifts: ${await db.collection('shifts').countDocuments()} ูุฑุฏูุฉ`);
    console.log(`โ Attendance: ${await db.collection('attendance').countDocuments()} ุณุฌู ุญุถูุฑ`);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู:', error);
  } finally {
    await client.close();
    console.log('\n๐ ุชู ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
  }
}

// ุชุดุบูู ุงููุญุต
checkProductionDatabase().then(() => {
  console.log('\nโ ุงูุชูู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช ุนูู ุงูุณูุฑูุฑ!');
  process.exit(0);
}).catch(error => {
  console.error('โ ูุดู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
  process.exit(1);
});
